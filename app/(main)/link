<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>推しリンクマネージャー</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Hiragino Sans', 'ヒラギノ角ゴシック', 'Hiragino Kaku Gothic ProN', 'Noto Sans JP', sans-serif;
            background-color: #f8f9fa;
            color: #333;
            line-height: 1.6;
        }

        .header {
            background: white;
            border-bottom: 1px solid #e9ecef;
            padding: 20px 0;
            margin-bottom: 30px;
        }

        .header-content {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header-left h1 {
            font-size: 1.8rem;
            font-weight: 600;
            color: #333;
            margin-bottom: 4px;
        }

        .header-left p {
            color: #666;
            font-size: 0.95rem;
        }

        .add-btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .add-btn:hover {
            background: #0056b3;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 20px;
        }

        /* モーダル */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }

        .modal-content {
            background-color: white;
            margin: 2% auto;
            padding: 0;
            border-radius: 8px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
        }

        .modal-header {
            padding: 20px 30px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-header h2 {
            font-size: 1.3rem;
            font-weight: 600;
            color: #333;
        }

        .close {
            color: #aaa;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 1;
        }

        .close:hover {
            color: #333;
        }

        .modal-body {
            padding: 30px;
        }

        .form-group {
            margin-bottom: 20px;
        }

        .form-group label {
            display: block;
            margin-bottom: 6px;
            font-weight: 500;
            color: #333;
            font-size: 0.95rem;
        }

        .form-group input, .form-group textarea, .form-group select {
            width: 100%;
            padding: 10px 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            font-size: 15px;
            transition: border-color 0.2s;
            background: white;
        }

        .form-group input:focus, .form-group textarea:focus, .form-group select:focus {
            outline: none;
            border-color: #007bff;
            box-shadow: 0 0 0 2px rgba(0, 123, 255, 0.1);
        }

        .form-row {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 20px;
        }

        /* 画像アップロード・トリミング */
        .image-section {
            display: flex;
            gap: 20px;
            align-items: flex-start;
        }

        .image-controls {
            flex: 1;
        }

        .image-preview-container {
            width: 120px;
            text-align: center;
        }

        .image-preview {
            width: 120px;
            height: 120px;
            border: 3px solid #dee2e6;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            overflow: hidden;
            position: relative;
            margin-bottom: 10px;
        }

        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }

        .image-preview-text {
            text-align: center;
            color: #999;
            font-size: 0.8rem;
            padding: 10px;
        }

        .crop-container {
            display: none;
            width: 100%;
            max-width: 400px;
            height: 300px;
            margin: 20px 0;
            border: 1px solid #dee2e6;
            border-radius: 8px;
            overflow: hidden;
            background: #f8f9fa;
        }

        .crop-container img {
            max-width: 100%;
            max-height: 100%;
        }

        .crop-buttons {
            display: none;
            gap: 10px;
            margin: 10px 0;
        }

        .btn-small {
            background: #6c757d;
            color: white;
            border: none;
            padding: 6px 12px;
            border-radius: 4px;
            font-size: 13px;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .btn-small:hover {
            background: #545b62;
        }

        .btn-small.primary {
            background: #007bff;
        }

        .btn-small.primary:hover {
            background: #0056b3;
        }

        /* カラーサークル */
        .color-section {
            display: flex;
            gap: 20px;
            align-items: center;
        }

        .color-circle-container {
            position: relative;
            width: 150px;
            height: 150px;
        }

        .color-wheel {
            width: 150px;
            height: 150px;
            border-radius: 50%;
            position: relative;
            background: conic-gradient(
                hsl(0, 100%, 50%),
                hsl(60, 100%, 50%),
                hsl(120, 100%, 50%),
                hsl(180, 100%, 50%),
                hsl(240, 100%, 50%),
                hsl(300, 100%, 50%),
                hsl(360, 100%, 50%)
            );
        }

        .color-saturation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border-radius: 50%;
            background: radial-gradient(circle, transparent 0%, white 100%);
            opacity: 0.3;
        }

        .color-picker-dot {
            position: absolute;
            width: 14px;
            height: 14px;
            border: 3px solid white;
            border-radius: 50%;
            pointer-events: none;
            box-shadow: 0 0 5px rgba(0,0,0,0.5);
            transform: translate(-50%, -50%);
            z-index: 2;
        }

        .brightness-slider {
            margin-top: 15px;
            width: 100%;
        }

        .brightness-slider input[type="range"] {
            width: 100%;
            height: 20px;
            border-radius: 10px;
            background: linear-gradient(to right, #000000, #ffffff);
            outline: none;
            -webkit-appearance: none;
        }

        .brightness-slider input[type="range"]::-webkit-slider-thumb {
            -webkit-appearance: none;
            appearance: none;
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #fff;
            border: 2px solid #007bff;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .brightness-slider input[type="range"]::-moz-range-thumb {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            background: #fff;
            border: 2px solid #007bff;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .color-info {
            flex: 1;
        }

        .color-display {
            width: 60px;
            height: 60px;
            border: 3px solid #dee2e6;
            border-radius: 50%;
            margin-bottom: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .color-presets {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
            margin-top: 10px;
        }

        .color-preset {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid transparent;
            transition: border-color 0.2s;
        }

        .color-preset:hover {
            border-color: #333;
        }

        .btn {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 4px;
            font-size: 15px;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
            width: 100%;
            margin-top: 20px;
        }

        .btn:hover {
            background: #0056b3;
        }

        /* 推しカード */
        .oshi-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }

        .oshi-card {
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            overflow: hidden;
            transition: box-shadow 0.2s;
            position: relative;
        }

        .oshi-card:hover {
            box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        }

        .oshi-card-header {
            height: 60px;
            position: relative;
            display: flex;
            align-items: center;
            padding: 0 20px;
        }

        .oshi-image {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            object-fit: cover;
            margin-right: 15px;
        }

        .oshi-avatar {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background: #ddd;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 20px;
            font-weight: bold;
            color: white;
            margin-right: 15px;
        }

        .oshi-main-info {
            flex: 1;
        }

        .oshi-name {
            font-size: 1.2rem;
            font-weight: 600;
            color: white;
            margin-bottom: 2px;
            text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
        }

        .oshi-meta {
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .oshi-category {
            color: rgba(255,255,255,0.9);
            font-size: 0.85rem;
            background: rgba(255,255,255,0.2);
            padding: 2px 8px;
            border-radius: 12px;
            font-weight: 500;
        }

        .oshi-days {
            color: rgba(255,255,255,0.9);
            font-size: 0.85rem;
            font-weight: 500;
        }

        .oshi-body {
            padding: 20px;
        }

        .oshi-description {
            margin-bottom: 15px;
            color: #666;
            font-size: 0.95rem;
            line-height: 1.5;
        }

        .links-container {
            margin-top: 15px;
        }

        .link-item {
            display: block;
            padding: 8px 12px;
            margin-bottom: 8px;
            background: #f8f9fa;
            border: 1px solid #e9ecef;
            border-radius: 4px;
            text-decoration: none;
            color: #333;
            font-size: 0.9rem;
            transition: background-color 0.2s;
            font-weight: 500;
        }

        .link-item:hover {
            background: #e9ecef;
            color: #007bff;
        }

        .link-item:last-child {
            margin-bottom: 0;
        }

        .link-icon {
            margin-right: 8px;
            font-size: 16px;
        }

        .delete-btn {
            position: absolute;
            top: 10px;
            right: 10px;
            background: rgba(0,0,0,0.3);
            border: none;
            color: white;
            font-size: 18px;
            cursor: pointer;
            width: 28px;
            height: 28px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.2s;
            z-index: 1;
        }

        .delete-btn:hover {
            background: rgba(220, 53, 69, 0.8);
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            background: white;
            border: 1px solid #e9ecef;
            border-radius: 8px;
            color: #666;
        }

        .empty-state h3 {
            font-size: 1.2rem;
            margin-bottom: 10px;
            color: #333;
            font-weight: 600;
        }

        .empty-state p {
            font-size: 0.95rem;
        }

        .no-links {
            color: #999;
            font-style: italic;
            font-size: 0.9rem;
            text-align: center;
            padding: 15px;
            background: #f8f9fa;
            border-radius: 4px;
        }

        @media (max-width: 768px) {
            .header-content {
                flex-direction: column;
                gap: 15px;
                text-align: center;
            }

            .container {
                padding: 0 15px;
            }
            
            .form-row {
                grid-template-columns: 1fr;
            }

            .image-section {
                flex-direction: column;
            }

            .color-section {
                flex-direction: column;
                align-items: center;
            }
            
            .oshi-grid {
                grid-template-columns: 1fr;
            }
            
            .modal-content {
                width: 95%;
                margin: 5% auto;
            }

            .modal-body {
                padding: 20px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content">
            <div class="header-left">
                <h1>推しリンクマネージャー</h1>
                <p>大切な推しのファンクラブやSNSリンクをまとめて管理</p>
            </div>
            <button class="add-btn" onclick="openModal()">
                <span>+</span>
                新しい推しを追加
            </button>
        </div>
    </div>

    <div class="container">
        <div id="oshiList" class="oshi-grid"></div>

        <div id="emptyState" class="empty-state">
            <h3>まだ推しが登録されていません</h3>
            <p>右上のボタンから推しの情報を登録してください</p>
        </div>
    </div>

    <!-- モーダル -->
    <div id="modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>新しい推しを追加</h2>
                <span class="close" onclick="closeModal()">&times;</span>
            </div>
            <div class="modal-body">
                <form id="oshiForm">
                    <div class="form-row">
                        <div class="form-group">
                            <label for="name">推しの名前 *</label>
                            <input type="text" id="name" required placeholder="例: 田中太郎">
                        </div>
                        <div class="form-group">
                            <label for="category">カテゴリ</label>
                            <select id="category">
                                <option value="アイドル">アイドル</option>
                                <option value="歌手">歌手</option>
                                <option value="俳優">俳優</option>
                                <option value="声優">声優</option>
                                <option value="YouTuber">YouTuber</option>
                                <option value="VTuber">VTuber</option>
                                <option value="その他">その他</option>
                            </select>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="startDate">推し始めた日</label>
                        <input type="date" id="startDate">
                    </div>

                    <div class="form-group">
                        <label>画像とテーマカラー</label>
                        <div class="image-section">
                            <div class="image-controls">
                                <input type="file" id="imageUpload" accept="image/*" style="margin-bottom: 15px;">
                                <div class="crop-container" id="cropContainer">
                                    <img id="cropImage" style="max-width: 100%;">
                                </div>
                                <div class="crop-buttons" id="cropButtons">
                                    <button type="button" class="btn-small primary" onclick="applyCrop()">トリミング適用</button>
                                    <button type="button" class="btn-small" onclick="cancelCrop()">キャンセル</button>
                                </div>
                            </div>
                            <div class="image-preview-container">
                                <div class="image-preview" id="imagePreview">
                                    <div class="image-preview-text">画像を<br>アップロード</div>
                                </div>
                                <small style="color: #666;">プレビュー</small>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label>テーマカラー</label>
                        <div class="color-section">
                            <div class="color-circle-container">
                                <div class="color-wheel" id="colorWheel">
                                    <div class="color-saturation"></div>
                                </div>
                                <div class="color-picker-dot" id="colorDot"></div>
                                <div class="brightness-slider">
                                    <input type="range" id="brightnessSlider" min="0" max="100" value="50">
                                    <small style="color: #666; display: block; text-align: center; margin-top: 5px;">明度</small>
                                </div>
                            </div>
                            <div class="color-info">
                                <div class="color-display" id="colorDisplay" style="background: #007bff;"></div>
                                <small style="color: #666;">選択した色</small>
                                <div class="color-presets">
                                    <div class="color-preset" style="background: #ff6b9d;" data-color="#ff6b9d"></div>
                                    <div class="color-preset" style="background: #f093fb;" data-color="#f093fb"></div>
                                    <div class="color-preset" style="background: #4facfe;" data-color="#4facfe"></div>
                                    <div class="color-preset" style="background: #43e97b;" data-color="#43e97b"></div>
                                    <div class="color-preset" style="background: #ffeaa7;" data-color="#ffeaa7"></div>
                                    <div class="color-preset" style="background: #fd79a8;" data-color="#fd79a8"></div>
                                    <div class="color-preset" style="background: #a29bfe;" data-color="#a29bfe"></div>
                                    <div class="color-preset" style="background: #6c5ce7;" data-color="#6c5ce7"></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="description">メモ・説明</label>
                        <textarea id="description" rows="3" placeholder="推しについてのメモや説明を入力"></textarea>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="fanclub">ファンクラブURL</label>
                            <input type="url" id="fanclub" placeholder="https://fanclub.example.com">
                        </div>
                        <div class="form-group">
                            <label for="twitter">Twitter/X URL</label>
                            <input type="url" id="twitter" placeholder="https://twitter.com/username">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="instagram">Instagram URL</label>
                            <input type="url" id="instagram" placeholder="https://instagram.com/username">
                        </div>
                        <div class="form-group">
                            <label for="youtube">YouTube URL</label>
                            <input type="url" id="youtube" placeholder="https://youtube.com/@username">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label for="tiktok">TikTok URL</label>
                            <input type="url" id="tiktok" placeholder="https://tiktok.com/@username">
                        </div>
                        <div class="form-group">
                            <label for="other">その他URL</label>
                            <input type="url" id="other" placeholder="https://example.com">
                        </div>
                    </div>

                    <button type="submit" class="btn">推しを追加</button>
                </form>
            </div>
        </div>
    </div>

    <script>
        let oshiData = [];
        let currentColor = '#007bff';
        let cropInstance = null;
        let originalImage = null;
        let currentHue = 210;
        let currentSaturation = 100;
        let currentLightness = 50;

        // モーダル制御
        function openModal() {
            document.getElementById('modal').style.display = 'block';
        }

        function closeModal() {
            document.getElementById('modal').style.display = 'none';
            resetForm();
        }

        function resetForm() {
            document.getElementById('oshiForm').reset();
            document.getElementById('imagePreview').innerHTML = '<div class="image-preview-text">画像を<br>アップロード</div>';
            document.getElementById('cropContainer').style.display = 'none';
            document.getElementById('cropButtons').style.display = 'none';
            
            // Cropperインスタンスを破棄
            if (cropInstance) {
                cropInstance.destroy();
                cropInstance = null;
            }
            
            // カラー設定をリセット
            currentColor = '#007bff';
            currentHue = 210;
            currentSaturation = 100;
            currentLightness = 50;
            document.getElementById('brightnessSlider').value = 50;
            updateColorDisplay();
        }

        // カラーホイール
        function initColorWheel() {
            const wheel = document.getElementById('colorWheel');
            const dot = document.getElementById('colorDot');
            const brightnessSlider = document.getElementById('brightnessSlider');
            let isDragging = false;

            // 初期位置設定
            updateDotPosition();

            function handleColorSelection(e) {
                const rect = wheel.getBoundingClientRect();
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                const x = e.clientX - rect.left - centerX;
                const y = e.clientY - rect.top - centerY;
                
                const angle = Math.atan2(y, x) * 180 / Math.PI;
                const distance = Math.sqrt(x * x + y * y);
                const maxDistance = rect.width / 2;
                
                if (distance <= maxDistance) {
                    currentHue = (angle + 360) % 360;
                    currentSaturation = Math.min((distance / maxDistance) * 100, 100);
                    currentLightness = parseInt(brightnessSlider.value);
                    
                    currentColor = hslToHex(currentHue, currentSaturation, currentLightness);
                    updateColorDisplay();
                    updateDotPosition();
                }
            }

            function updateDotPosition() {
                const rect = wheel.getBoundingClientRect();
                const centerX = rect.width / 2;
                const centerY = rect.height / 2;
                const radius = (currentSaturation / 100) * (rect.width / 2);
                const angleRad = (currentHue * Math.PI) / 180;
                
                const x = centerX + radius * Math.cos(angleRad);
                const y = centerY + radius * Math.sin(angleRad);
                
                dot.style.left = x + 'px';
                dot.style.top = y + 'px';
            }

            // マウスイベント
            wheel.addEventListener('mousedown', function(e) {
                isDragging = true;
                handleColorSelection(e);
            });

            document.addEventListener('mousemove', function(e) {
                if (isDragging) {
                    handleColorSelection(e);
                }
            });

            document.addEventListener('mouseup', function() {
                isDragging = false;
            });

            // タッチイベント
            wheel.addEventListener('touchstart', function(e) {
                e.preventDefault();
                isDragging = true;
                const touch = e.touches[0];
                const mouseEvent = new MouseEvent('mousedown', {
                    clientX: touch.clientX,
                    clientY: touch.clientY
                });
                handleColorSelection(mouseEvent);
            });

            document.addEventListener('touchmove', function(e) {
                if (isDragging) {
                    e.preventDefault();
                    const touch = e.touches[0];
                    const mouseEvent = new MouseEvent('mousemove', {
                        clientX: touch.clientX,
                        clientY: touch.clientY
                    });
                    handleColorSelection(mouseEvent);
                }
            });

            document.addEventListener('touchend', function() {
                isDragging = false;
            });

            // 明度スライダー
            brightnessSlider.addEventListener('input', function() {
                currentLightness = parseInt(this.value);
                currentColor = hslToHex(currentHue, currentSaturation, currentLightness);
                updateColorDisplay();
            });
        }

        function hslToHex(h, s, l) {
            l /= 100;
            const a = s * Math.min(l, 1 - l) / 100;
            const f = n => {
                const k = (n + h / 30) % 12;
                const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
                return Math.round(255 * color).toString(16).padStart(2, '0');
            };
            return `#${f(0)}${f(8)}${f(4)}`;
        }

        function updateColorDisplay() {
            document.getElementById('colorDisplay').style.background = currentColor;
            document.getElementById('imagePreview').style.borderColor = currentColor;
        }

        // カラープリセット
        document.querySelectorAll('.color-preset').forEach(preset => {
            preset.addEventListener('click', function() {
                currentColor = this.dataset.color;
                updateColorDisplay();
            });
        });

        // 画像アップロード・トリミング
        document.getElementById('imageUpload').addEventListener('change', function(e) {
            const file = e.target.files[0];
            if (file) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    originalImage = e.target.result;
                    showCropInterface(e.target.result);
                };
                reader.readAsDataURL(file);
            }
        });

        function showCropInterface(imageSrc) {
            const cropContainer = document.getElementById('cropContainer');
            const cropImage = document.getElementById('cropImage');
            const cropButtons = document.getElementById('cropButtons');
            
            // 既存のcropperを破棄
            if (cropInstance) {
                cropInstance.destroy();
                cropInstance = null;
            }
            
            cropImage.src = imageSrc;
            cropContainer.style.display = 'block';
            cropButtons.style.display = 'flex';
            
            // 画像が読み込まれたらCropperを初期化
            cropImage.onload = function() {
                cropInstance = new Cropper(cropImage, {
                    aspectRatio: 1,
                    viewMode: 2,
                    autoCropArea: 0.8,
                    responsive: true,
                    restore: false,
                    guides: true,
                    center: true,
                    highlight: false,
                    cropBoxMovable: true,
                    cropBoxResizable: true,
                    toggleDragModeOnDblclick: false,
                });
            };
        }

        function applyCrop() {
            if (cropInstance) {
                const canvas = cropInstance.getCroppedCanvas({
                    width: 200,
                    height: 200,
                    imageSmoothingEnabled: true,
                    imageSmoothingQuality: 'high',
                });
                
                const croppedImage = canvas.toDataURL('image/jpeg', 0.9);
                document.getElementById('imagePreview').innerHTML = `<img src="${croppedImage}" alt="preview">`;
                
                // Cropperを破棄
                cropInstance.destroy();
                cropInstance = null;
            }
            
            cancelCrop();
        }

        function cancelCrop() {
            if (cropInstance) {
                cropInstance.destroy();
                cropInstance = null;
            }
            document.getElementById('cropContainer').style.display = 'none';
            document.getElementById('cropButtons').style.display = 'none';
        }

        // 日数計算
        function calculateDays(startDate) {
            if (!startDate) return null;
            const start = new Date(startDate);
            const today = new Date();
            const diffTime = today - start;
            const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
            return diffDays;
        }

        // フォーム送信処理
        document.getElementById('oshiForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const imagePreview = document.getElementById('imagePreview').querySelector('img');
            const imageData = imagePreview ? imagePreview.src : null;
            
            const formData = {
                id: Date.now(),
                name: document.getElementById('name').value,
                category: document.getElementById('category').value,
                startDate: document.getElementById('startDate').value,
                description: document.getElementById('description').value,
                color: currentColor,
                image: imageData,
                fanclub: document.getElementById('fanclub').value,
                twitter: document.getElementById('twitter').value,
                instagram: document.getElementById('instagram').value,
                youtube: document.getElementById('youtube').value,
                tiktok: document.getElementById('tiktok').value,
                other: document.getElementById('other').value
            };

            oshiData.push(formData);
            renderOshiList();
            closeModal();
        });

        // 推しリスト表示
        function renderOshiList() {
            const listContainer = document.getElementById('oshiList');
            const emptyState = document.getElementById('emptyState');
            
            if (oshiData.length === 0) {
                listContainer.innerHTML = '';
                emptyState.style.display = 'block';
                return;
            }

            emptyState.style.display = 'none';
            
            listContainer.innerHTML = oshiData.map(oshi => {
                const links = [];
                
                if (oshi.fanclub) links.push(`<a href="${oshi.fanclub}" class="link-item" target="_blank"><span class="link-icon">👑</span>ファンクラブ</a>`);
                if (oshi.twitter) links.push(`<a href="${oshi.twitter}" class="link-item" target="_blank"><span class="link-icon">🐦</span>Twitter</a>`);
                if (oshi.instagram) links.push(`<a href="${oshi.instagram}" class="link-item" target="_blank"><span class="link-icon">📷</span>Instagram</a>`);
                if (oshi.youtube) links.push(`<a href="${oshi.youtube}" class="link-item" target="_blank"><span class="link-icon">📺</span>YouTube</a>`);
                if (oshi.tiktok) links.push(`<a href="${oshi.tiktok}" class="link-item" target="_blank"><span class="link-icon">🎵</span>TikTok</a>`);
                if (oshi.other) links.push(`<a href="${oshi.other}" class="link-item" target="_blank"><span class="link-icon">🔗</span>その他</a>`);

                const days = calculateDays(oshi.startDate);
                const daysText = days ? `推し歴 ${days}日` : '';

                const avatarContent = oshi.image ? 
                    `<img src="${oshi.image}" alt="${oshi.name}" class="oshi-image" style="border: 3px solid ${oshi.color}">` :
                    `<div class="oshi-avatar" style="background: ${oshi.color || '#007bff'}; border: 3px solid ${oshi.color || '#007bff'}">${oshi.name.charAt(0)}</div>`;

                return `
                    <div class="oshi-card">
                        <div class="oshi-card-header" style="background: linear-gradient(135deg, ${oshi.color || '#007bff'}, ${adjustColor(oshi.color || '#007bff', -20)})">
                            <button class="delete-btn" onclick="deleteOshi(${oshi.id})">×</button>
                            ${avatarContent}
                            <div class="oshi-main-info">
                                <div class="oshi-name">${oshi.name}</div>
                                <div class="oshi-meta">
                                    <span class="oshi-category">${oshi.category}</span>
                                    ${daysText ? `<span class="oshi-days">${daysText}</span>` : ''}
                                </div>
                            </div>
                        </div>
                        <div class="oshi-body">
                            ${oshi.description ? `<div class="oshi-description">${oshi.description}</div>` : ''}
                            <div class="links-container">
                                ${links.length > 0 ? links.join('') : '<div class="no-links">リンクが登録されていません</div>'}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // 色を調整する関数（グラデーション用）
        function adjustColor(color, amount) {
            const usePound = color[0] === '#';
            const col = usePound ? color.slice(1) : color;
            const num = parseInt(col, 16);
            let r = (num >> 16) + amount;
            let g = (num >> 8 & 0x00FF) + amount;
            let b = (num & 0x0000FF) + amount;
            r = r > 255 ? 255 : r < 0 ? 0 : r;
            g = g > 255 ? 255 : g < 0 ? 0 : g;
            b = b > 255 ? 255 : b < 0 ? 0 : b;
            return (usePound ? '#' : '') + (r << 16 | g << 8 | b).toString(16).padStart(6, '0');
        }

        // 推し削除
        function deleteOshi(id) {
            if (confirm('この推しを削除しますか？')) {
                oshiData = oshiData.filter(oshi => oshi.id !== id);
                renderOshiList();
            }
        }

        // モーダル外クリックで閉じる
        window.onclick = function(event) {
            const modal = document.getElementById('modal');
            if (event.target == modal) {
                closeModal();
            }
        }

        // 初期化
        document.addEventListener('DOMContentLoaded', function() {
            initColorWheel();
            updateColorDisplay();
            renderOshiList();
        });
    </script>
</body>
</html>